# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "app".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose   
version: "3.7"

services:

  node-red:
    container_name: mIoTHub-rednode
    build:
      context: ./node-red/
      dockerfile: Dockerfile
    image: nodered/node-red:latest
    environment:
      - TZ=Europe/Amsterdam
      - ALEXA_PORT=80
    ports:
      - "1880:1880"
    networks:
       hub-network:
        ipv4_address: 172.30.0.100
    volumes:
      - ./node-red/data:/data

  mosquitto:
    container_name: mIoTHub-mosquitto
    image: eclipse-mosquitto
    volumes:
    - ./mosquitto/config:/mosquitto/config
    - ./mosquitto/log:/mosquitto/log
    - ./mosquitto/data/:/mosquitto/data
    restart: always
    networks:
      hub-network:
        ipv4_address: 172.30.0.101
    ports:
    - "1883:1883" 

  influxdb:
    container_name: mIoTHub-influxdb
    image: influxdb:2.7.4
    ports:
      - 8086:8086
    networks:
      hub-network:
        ipv4_address: 172.30.0.102

#  zigbee2mqtt:
#    container_name: zigbee2mqtt
#    image: koenkk/zigbee2mqtt:latest
   # restart: unless-stopped
#    volumes:
#      - ./Zigbee2Mqtt:/app/data
#      - ./Zigbee2Mqtt/run/udev:/run/udev:ro
#    ports:
      # Frontend port
#      - 7070:7070
#    environment:
#      - TZ=Europe/Berlin
    #devices: pennetta zigbee
      # Make sure this matched your adapter location
      #- /dev/serial/by-id/usb-Texas_Instruments_TI_CC2531_USB_CDC___0X00124B0018ED3DDF-if00:/dev/ttyACM0

networks:
  hub-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16