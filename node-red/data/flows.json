[
    {
        "id": "96e55a8f4e272af3",
        "type": "tab",
        "label": "events",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9277445b8b04291e",
        "type": "tab",
        "label": "main",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6a407f545c7dab10",
        "type": "MySQLdatabase",
        "name": "",
        "host": "172.30.0.109",
        "port": "3306",
        "db": "mydb",
        "tz": "",
        "charset": ""
    },
    {
        "id": "09330d4a9aadc820",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "true",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "8ecd27c4c39f8117",
        "type": "ui_tab",
        "name": "Template",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "aec5af2c2cd18fa4",
        "type": "ui_group",
        "name": "Dashboard ",
        "tab": "8ecd27c4c39f8117",
        "order": 1,
        "disp": true,
        "width": "13",
        "collapse": false,
        "className": "<style>     /* Stile generale della dashboard */     .body {     font-family: Arial, sans-serif;     background-color: #f2f2f2;     margin: 0;     }      .container {     max-width: 800px;     margin: 20px auto;     }      /* Stile del blocco della temperatura */     .temperature-block {     background-color: #fff;     border: 1px solid #ddd;     border-radius: 5px;     padding: 15px;     margin-bottom: 20px;     }      /* Stile del titolo della temperatura */     .temperature-title {     font-size: 18px;     font-weight: bold;     color: #333;     }      /* Stile del valore della temperatura */     .temperature-value {     font-size: 24px;     color: #4CAF50;     }  </style>"
    },
    {
        "id": "e78bdce391db9ff9",
        "type": "mqtt-broker",
        "name": "mIoTHub-mosquitto",
        "broker": "host.docker.internal",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "fb202f2b9c4ea98f",
        "type": "ui_tab",
        "name": "Table",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "516a4340f4b51307",
        "type": "telegram bot",
        "botname": "IotHub",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "updatemode": "polling",
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksprotocol": "socks5",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "755e2381bfb7263c",
        "type": "influxdb",
        "hostname": "http://172.30.0.103",
        "port": "8086",
        "protocol": "http",
        "database": "$I{INFLUX_INITIAL_BUCKET}",
        "name": "influx",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://172.30.0.103:8086",
        "timeout": "10",
        "rejectUnauthorized": false
    },
    {
        "id": "cc5a18f1f44388ac",
        "type": "function",
        "z": "96e55a8f4e272af3",
        "name": "temperature-alert",
        "func": "if(msg.payload.temperature > 100){\n    var parts = msg.topic.split(\"/\");\n    msg.payload.room = parts[1].slice(5);\n    msg.payload.type = 1;\n    msg.payload.description = \"Temperatura troppo alta\"\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 480,
        "wires": [
            [
                "1272349ffe4b0fa2",
                "629861d8999803f4",
                "116ae71bba52f9f6"
            ]
        ]
    },
    {
        "id": "11a14ccbece2125d",
        "type": "function",
        "z": "96e55a8f4e272af3",
        "name": "humidity-alert",
        "func": "if(msg.payload.humidity > 100){\n    var parts = msg.topic.split(\"/\");\n    msg.payload.room = parts[1].slice(4);\n    msg.payload.type = 1;\n    msg.payload.description = \"Temperatura troppo alta\"\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 540,
        "wires": [
            [
                "9a37a2f74a9b6569",
                "116ae71bba52f9f6"
            ]
        ]
    },
    {
        "id": "3b7ceacd7102e0c6",
        "type": "function",
        "z": "96e55a8f4e272af3",
        "name": "airquality-alert",
        "func": "if(msg.payload.air_quality < 0){\n  var parts = msg.topic.split(\"/\");\n  msg.payload.room = parts[1].slice(4);\n  msg.payload.type = 1;\n  msg.payload.description = \"Temperatura troppo alta\"\n  return msg;  \n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 600,
        "wires": [
            [
                "3f46a381194d213c",
                "116ae71bba52f9f6"
            ]
        ]
    },
    {
        "id": "106008f03f7f899a",
        "type": "trigger",
        "z": "96e55a8f4e272af3",
        "name": "",
        "op1": "Allarme incendio",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "0",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "1",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 600,
        "y": 680,
        "wires": [
            [
                "6c3a13b5d8191a15"
            ]
        ]
    },
    {
        "id": "1272349ffe4b0fa2",
        "type": "function",
        "z": "96e55a8f4e272af3",
        "name": "message_temperature",
        "func": "const temp = msg.payload.temperature\nmsg.payload = {}\nmsg.payload.chatId = 687822250\nmsg.payload.type = 'message'\nmsg.payload.content = 'Temperatura troppo alta: '+ temp + ' c°';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 480,
        "wires": [
            [
                "4bd0ae30306399d4"
            ]
        ]
    },
    {
        "id": "4bd0ae30306399d4",
        "type": "telegram sender",
        "z": "96e55a8f4e272af3",
        "name": "telegram",
        "bot": "516a4340f4b51307",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1320,
        "y": 580,
        "wires": [
            [
                "cfeea5595d494f54"
            ]
        ]
    },
    {
        "id": "9a37a2f74a9b6569",
        "type": "function",
        "z": "96e55a8f4e272af3",
        "name": "message_humidity",
        "func": "const hum = msg.payload.humidity\nmsg.payload = {}\nmsg.payload.chatId = 687822250\nmsg.payload.type = 'message'\nmsg.payload.content = 'Umidità troppo alta: '+ hum + ' %';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 540,
        "wires": [
            [
                "4bd0ae30306399d4"
            ]
        ]
    },
    {
        "id": "3f46a381194d213c",
        "type": "function",
        "z": "96e55a8f4e272af3",
        "name": "message_air",
        "func": "msg.payload = {}\nmsg.payload.chatId = 687822250\nmsg.payload.type = 'message'\nmsg.payload.content = 'Qualità aria bassa';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 600,
        "wires": [
            [
                "4bd0ae30306399d4"
            ]
        ]
    },
    {
        "id": "6c3a13b5d8191a15",
        "type": "function",
        "z": "96e55a8f4e272af3",
        "name": "message_smoke",
        "func": "const text = msg.payload\nmsg.payload = {}\nmsg.payload.chatId = 687822250\nmsg.payload.type = 'message'\nmsg.payload.content = text\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "4565e90f107e049a",
        "type": "mqtt in",
        "z": "96e55a8f4e272af3",
        "name": "temperatures",
        "topic": "home/#",
        "qos": "2",
        "datatype": "json",
        "broker": "e78bdce391db9ff9",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 270,
        "y": 580,
        "wires": [
            [
                "cc5a18f1f44388ac",
                "11a14ccbece2125d",
                "3b7ceacd7102e0c6",
                "106008f03f7f899a"
            ]
        ]
    },
    {
        "id": "82e5099c71b0b5e9",
        "type": "telegram command",
        "z": "96e55a8f4e272af3",
        "name": "status",
        "command": "/report",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "516a4340f4b51307",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 330,
        "y": 1020,
        "wires": [
            [
                "a24b87d1168a0124"
            ],
            []
        ]
    },
    {
        "id": "a24b87d1168a0124",
        "type": "function",
        "z": "96e55a8f4e272af3",
        "name": "choice_button",
        "func": "var opts = {\n    reply_markup: JSON.stringify({\n        \"inline_keyboard\": [[\n            {\n                \"text\": \"Temperature\",\n                \"callback_data\": 1\n            },\n            {\n                \"text\": \"Humidity\",\n                \"callback_data\": 2\n            },\n            {\n                \"text\": \"Air Quality\",\n                \"callback_data\": 3\n            }]\n        ]\n    })\n};\n\nmsg.error = false;\nmsg.payload.content = \"Seleziona un parametro\";\nmsg.payload.options = opts;\nmsg.payload.chatId = 687822250\nmsg.payload.type = \"message\";\n\nreturn [msg];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1020,
        "wires": [
            [
                "be740a2eee8a768d"
            ]
        ]
    },
    {
        "id": "249b0b3f64a136cb",
        "type": "function",
        "z": "96e55a8f4e272af3",
        "name": "message_status",
        "func": "msg.callback = msg.payload;\n\nif (msg.callback.content == 1) {\n  var field = \"temperature\";\n}\nif (msg.callback.content == 2) {\n  var field = \"humidity\";\n}\nif (msg.callback.content == 3) {\n  var field = \"air_quality\";\n}\n\n// Crea la query\nvar query = `\nfrom(bucket: \"iot_bucket\")\n  |> range(start: -1h, stop: now())\n  |> filter(fn: (r) => r[\"_field\"] == \"${field}\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |>last()\n`;\nmsg.query = query;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 1220,
        "wires": [
            [
                "963fc9bba5323539"
            ]
        ]
    },
    {
        "id": "be740a2eee8a768d",
        "type": "telegram sender",
        "z": "96e55a8f4e272af3",
        "name": "",
        "bot": "516a4340f4b51307",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1110,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "6f64c8cbe1d57002",
        "type": "telegram event",
        "z": "96e55a8f4e272af3",
        "name": "response",
        "bot": "516a4340f4b51307",
        "event": "callback_query",
        "autoanswer": false,
        "x": 340,
        "y": 1220,
        "wires": [
            [
                "249b0b3f64a136cb"
            ]
        ]
    },
    {
        "id": "c7102c16cce6831f",
        "type": "function",
        "z": "96e55a8f4e272af3",
        "name": "function 1",
        "func": "let label =\"\"\nif(msg.callback.content == 1){\n    label += \"Temperatura Stanza \";\n} else if (msg.callback.content == 2){\n    label += \"Umidità Stanza \";\n}else{\n    label += \"Qualità dell'aria Stanza \";\n}\n\nvar i = 0;\nvar content=\"\";\nmsg.payload.forEach(function (element) {\n    content += \"\\n \"+ label + i + \": \" + element['_value'];\n    i = i + 1;\n});\nmsg.payload={}\n\nmsg.payload.content = content;\nmsg.payload.type = 'message'\nmsg.payload.chatId = 687822250\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 1220,
        "wires": [
            [
                "22ef5763a1475cbe"
            ]
        ]
    },
    {
        "id": "22ef5763a1475cbe",
        "type": "telegram sender",
        "z": "96e55a8f4e272af3",
        "name": "",
        "bot": "516a4340f4b51307",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1630,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "cfeea5595d494f54",
        "type": "debug",
        "z": "96e55a8f4e272af3",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1640,
        "y": 580,
        "wires": []
    },
    {
        "id": "963fc9bba5323539",
        "type": "influxdb in",
        "z": "96e55a8f4e272af3",
        "influxdb": "755e2381bfb7263c",
        "name": "",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "${INFLUX_ORG}",
        "x": 950,
        "y": 1220,
        "wires": [
            [
                "c7102c16cce6831f"
            ]
        ]
    },
    {
        "id": "116ae71bba52f9f6",
        "type": "function",
        "z": "96e55a8f4e272af3",
        "name": "log_storage",
        "func": "if(msg.payload.type){\n    var type = msg.payload.type;\n    var description = msg.payload.description;\n    var room = msg.payload.room;\n}\n\n\nvar query = \"INSERT INTO log_storage (`date`, `type`, `description`, `room`) VALUES (NOW(), '\" + type + \"', '\" + description + \"', '\" + room + \"')\";\n\nmsg.topic = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 780,
        "wires": [
            [
                "0fc0d79f9182be06"
            ]
        ]
    },
    {
        "id": "0fc0d79f9182be06",
        "type": "mysql",
        "z": "96e55a8f4e272af3",
        "mydb": "6a407f545c7dab10",
        "name": "",
        "x": 1310,
        "y": 780,
        "wires": [
            [
                "79e439d8dfa55535"
            ]
        ]
    },
    {
        "id": "629861d8999803f4",
        "type": "debug",
        "z": "96e55a8f4e272af3",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 340,
        "wires": []
    },
    {
        "id": "79e439d8dfa55535",
        "type": "debug",
        "z": "96e55a8f4e272af3",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1640,
        "y": 780,
        "wires": []
    },
    {
        "id": "bd9695c0525b6b70",
        "type": "http request",
        "z": "9277445b8b04291e",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "body",
        "url": "https://api.weatherapi.com/v1/current.json?q=celano&key=2a1bf9e463f24539a99223657240302",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 390,
        "y": 120,
        "wires": [
            [
                "24c2f76b105490f2"
            ]
        ],
        "outputLabels": [
            "msg.payload"
        ]
    },
    {
        "id": "aceb37565443387c",
        "type": "inject",
        "z": "9277445b8b04291e",
        "name": "inject",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 120,
        "wires": [
            [
                "bd9695c0525b6b70"
            ]
        ]
    },
    {
        "id": "b4717558cb4824e3",
        "type": "debug",
        "z": "9277445b8b04291e",
        "name": "msg.payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 140,
        "wires": []
    },
    {
        "id": "aa785a2387531020",
        "type": "mysql",
        "z": "9277445b8b04291e",
        "mydb": "6a407f545c7dab10",
        "name": "mydb",
        "x": 1130,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "026190a39ee06c59",
        "type": "function",
        "z": "9277445b8b04291e",
        "name": "store_weather_data",
        "func": "var temperature = msg.payload.current.temp_c\nvar humidity = msg.payload.current.humidity\nvar query = \"INSERT INTO external_temperatures(temperature,humidity) VALUES (\"+ temperature +\",\"+ humidity +\")\"\n\nmsg.topic = query;\nmsg.payload =[temperature,humidity];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 80,
        "wires": [
            [
                "aa785a2387531020"
            ]
        ]
    },
    {
        "id": "0666aade4992673c",
        "type": "mysql",
        "z": "9277445b8b04291e",
        "mydb": "6a407f545c7dab10",
        "name": "database",
        "x": 680,
        "y": 720,
        "wires": [
            [
                "66cc76d2ac924a77"
            ]
        ]
    },
    {
        "id": "084de9fab81673ee",
        "type": "function",
        "z": "9277445b8b04291e",
        "name": "show_saved_data",
        "func": "var query = \"SELECT * FROM external_temperatures ORDER BY date DESC LIMIT 1\";\nmsg.topic = query\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 720,
        "wires": [
            [
                "0666aade4992673c"
            ]
        ]
    },
    {
        "id": "a6e232e2e8b8f611",
        "type": "ui_text",
        "z": "9277445b8b04291e",
        "group": "aec5af2c2cd18fa4",
        "order": 0,
        "width": "5",
        "height": "3",
        "name": "",
        "label": "",
        "format": "{{message.payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1530,
        "y": 720,
        "wires": [],
        "info": "<div style=\"text-align:center;\">\r\n    <h2>Dati Sensori</h2>\r\n    <p>ID: {{msg.payload.ID}}</p>\r\n    <p>Data: {{msg.payload.date}}</p>\r\n    <p>Temperatura: {{msg.payload.temperature}} °C</p>\r\n    <p>Umidità: {{msg.payload.humidity}} %</p>\r\n</div>\r\n"
    },
    {
        "id": "24c2f76b105490f2",
        "type": "json",
        "z": "9277445b8b04291e",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 610,
        "y": 80,
        "wires": [
            [
                "026190a39ee06c59",
                "b62e580275962299"
            ]
        ]
    },
    {
        "id": "7f5395fc6ca58d1e",
        "type": "ui_template",
        "z": "9277445b8b04291e",
        "group": "aec5af2c2cd18fa4",
        "name": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "\n<div class=temperature-block\">\n    <h2>Dati Esterno</h2>\n    <p><b>Data:</b> {{msg.payload.date}}</p>\n    <p><b>Temperatura: </b> {{msg.payload.temperature}} °C</p>\n    <p><b>Umidità:</b> {{msg.payload.humidity}} %</p>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1240,
        "y": 720,
        "wires": [
            [
                "a6e232e2e8b8f611"
            ]
        ]
    },
    {
        "id": "8736bfb8126a57ad",
        "type": "debug",
        "z": "9277445b8b04291e",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.temperature",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 600,
        "wires": []
    },
    {
        "id": "ec255d89370c3ff8",
        "type": "ui_gauge",
        "z": "9277445b8b04291e",
        "name": "",
        "group": "aec5af2c2cd18fa4",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Temperatura Media Stanze",
        "label": "celsius",
        "format": "{{value}} c°",
        "min": "15",
        "max": "30",
        "colors": [
            "#ca3838",
            "#00b500",
            "#ca3838"
        ],
        "seg1": "18",
        "seg2": "22",
        "diff": false,
        "className": "",
        "x": 980,
        "y": 380,
        "wires": [],
        "inputLabels": [
            "msg.payload.tempearature"
        ]
    },
    {
        "id": "66cc76d2ac924a77",
        "type": "change",
        "z": "9277445b8b04291e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[0]",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 720,
        "wires": [
            [
                "7f5395fc6ca58d1e",
                "8736bfb8126a57ad"
            ]
        ]
    },
    {
        "id": "19f68dc37e382fed",
        "type": "function",
        "z": "9277445b8b04291e",
        "name": "mean",
        "func": "var i = 0,val=0;\nmsg.payload.forEach(function(element) {\n    val += element['_value'];\n    i += 1;\n});\nmsg.payload={}\nmsg.payload = parseInt(val / i);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 380,
        "wires": [
            [
                "ec255d89370c3ff8"
            ]
        ]
    },
    {
        "id": "928dd37bd92ec803",
        "type": "ui_gauge",
        "z": "9277445b8b04291e",
        "name": "",
        "group": "aec5af2c2cd18fa4",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Umidità Media Stanze",
        "label": "percentuale",
        "format": "{{value}} %",
        "min": "0",
        "max": "100",
        "colors": [
            "#ca3838",
            "#00b500",
            "#ca3838"
        ],
        "seg1": "40",
        "seg2": "60",
        "diff": false,
        "className": "",
        "x": 980,
        "y": 460,
        "wires": [],
        "inputLabels": [
            "msg.payload.tempearature"
        ]
    },
    {
        "id": "b62e580275962299",
        "type": "function",
        "z": "9277445b8b04291e",
        "name": "weather",
        "func": "msg.payload=msg.payload.current.condition\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 140,
        "wires": [
            [
                "583999d279078dca"
            ]
        ]
    },
    {
        "id": "583999d279078dca",
        "type": "ui_template",
        "z": "9277445b8b04291e",
        "group": "aec5af2c2cd18fa4",
        "name": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<div class=temperature-block\">\n    <img src=\"{{msg.payload.icon}}\" alt=\"meteo\">\n    <p><b>Tempo: </b> {{msg.payload.text}} </p>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1060,
        "y": 140,
        "wires": [
            [
                "b4717558cb4824e3"
            ]
        ]
    },
    {
        "id": "be231caa65932fe6",
        "type": "inject",
        "z": "9277445b8b04291e",
        "name": "inject",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 720,
        "wires": [
            [
                "084de9fab81673ee"
            ]
        ]
    },
    {
        "id": "9155cd4321a8f6c5",
        "type": "influxdb in",
        "z": "9277445b8b04291e",
        "influxdb": "755e2381bfb7263c",
        "name": "",
        "query": "from(bucket: \"iot_bucket\")\n  |> range(start: -1h, stop: now())\n  |> filter(fn: (r) => r[\"_field\"] == \"temperature\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> last()\n  |> yield(name: \"mean\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "${INFLUX_ORG}",
        "x": 350,
        "y": 380,
        "wires": [
            [
                "19f68dc37e382fed"
            ]
        ]
    },
    {
        "id": "99e917c6a70d3afc",
        "type": "influxdb in",
        "z": "9277445b8b04291e",
        "influxdb": "755e2381bfb7263c",
        "name": "",
        "query": "from(bucket: \"iot_bucket\")\n  |> range(start: -1h, stop: now())\n  |> filter(fn: (r) => r[\"_field\"] == \"humidity\")\n  |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n  |> last()\n  |> yield(name: \"mean\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "${INFLUX_ORG}",
        "x": 350,
        "y": 460,
        "wires": [
            [
                "e833378becebf969"
            ]
        ]
    },
    {
        "id": "ed2a51dd01947339",
        "type": "inject",
        "z": "9277445b8b04291e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 420,
        "wires": [
            [
                "9155cd4321a8f6c5",
                "99e917c6a70d3afc"
            ]
        ]
    },
    {
        "id": "e833378becebf969",
        "type": "function",
        "z": "9277445b8b04291e",
        "name": "mean",
        "func": "var i = 0,val=0;\nmsg.payload.forEach(function(element) {\n    val += element['_value'];\n    i += 1;\n});\nmsg.payload={}\nmsg.payload = parseInt(val / i);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 460,
        "wires": [
            [
                "928dd37bd92ec803"
            ]
        ]
    }
]